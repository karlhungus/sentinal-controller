/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/karlhungus/sentinal-controller/pkg/apis/sentinalcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SentinalDeploymentLister helps list SentinalDeployments.
type SentinalDeploymentLister interface {
	// List lists all SentinalDeployments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SentinalDeployment, err error)
	// SentinalDeployments returns an object that can list and get SentinalDeployments.
	SentinalDeployments(namespace string) SentinalDeploymentNamespaceLister
	SentinalDeploymentListerExpansion
}

// sentinalDeploymentLister implements the SentinalDeploymentLister interface.
type sentinalDeploymentLister struct {
	indexer cache.Indexer
}

// NewSentinalDeploymentLister returns a new SentinalDeploymentLister.
func NewSentinalDeploymentLister(indexer cache.Indexer) SentinalDeploymentLister {
	return &sentinalDeploymentLister{indexer: indexer}
}

// List lists all SentinalDeployments in the indexer.
func (s *sentinalDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.SentinalDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SentinalDeployment))
	})
	return ret, err
}

// SentinalDeployments returns an object that can list and get SentinalDeployments.
func (s *sentinalDeploymentLister) SentinalDeployments(namespace string) SentinalDeploymentNamespaceLister {
	return sentinalDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SentinalDeploymentNamespaceLister helps list and get SentinalDeployments.
type SentinalDeploymentNamespaceLister interface {
	// List lists all SentinalDeployments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SentinalDeployment, err error)
	// Get retrieves the SentinalDeployment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SentinalDeployment, error)
	SentinalDeploymentNamespaceListerExpansion
}

// sentinalDeploymentNamespaceLister implements the SentinalDeploymentNamespaceLister
// interface.
type sentinalDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SentinalDeployments in the indexer for a given namespace.
func (s sentinalDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SentinalDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SentinalDeployment))
	})
	return ret, err
}

// Get retrieves the SentinalDeployment from the indexer for a given namespace and name.
func (s sentinalDeploymentNamespaceLister) Get(name string) (*v1alpha1.SentinalDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sentinaldeployment"), name)
	}
	return obj.(*v1alpha1.SentinalDeployment), nil
}
